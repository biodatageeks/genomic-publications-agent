#!/usr/bin/env python3
"""
Example usage of the ClinvarRelationshipValidator module.

This script demonstrates how to use the ClinVar relationship validator to verify
detected relationships between genes, variants, and diseases from literature data.

Usage:
    python validate_relationships.py --input relationships.csv --output validation_report.json --email your.email@example.com
"""

import argparse
import logging
import sys
import os
from typing import Dict, List, Any

from src.clinvar_relationship_validator import ClinvarRelationshipValidator


def setup_logging(verbose: bool = False):
    """
    Configures the logging system.
    
    Args:
        verbose: Whether to display detailed logs
    """
    log_level = logging.DEBUG if verbose else logging.INFO
    
    logging.basicConfig(
        level=log_level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler()],
    )
    
    # Silence overly detailed library logs
    if not verbose:
        logging.getLogger("urllib3").setLevel(logging.WARNING)


def parse_arguments():
    """
    Processes command line arguments.
    
    Returns:
        Processed arguments
    """
    parser = argparse.ArgumentParser(
        description="Validation of gene-variant-disease relationships using ClinVar data"
    )
    
    parser.add_argument(
        "--input",
        "-i",
        required=True,
        help="Path to CSV file with relationships generated by CooccurrenceContextAnalyzer"
    )
    
    parser.add_argument(
        "--output",
        "-o",
        required=True,
        help="Path to output file with validation report (JSON or CSV)"
    )
    
    parser.add_argument(
        "--email",
        "-e",
        required=True,
        help="Email address used for NCBI/ClinVar API queries"
    )
    
    parser.add_argument(
        "--api-key",
        "-k",
        help="Optional NCBI API key for increased query limits"
    )
    
    parser.add_argument(
        "--format",
        "-f",
        choices=["json", "csv"],
        default="json",
        help="Output report format (default: json)"
    )
    
    parser.add_argument(
        "--no-cache",
        action="store_true",
        help="Disables API query caching"
    )
    
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="Displays detailed logging messages"
    )
    
    return parser.parse_args()


def main():
    """Main program function."""
    args = parse_arguments()
    setup_logging(args.verbose)
    
    logger = logging.getLogger("validate_relationships")
    
    # Check if input file exists
    if not os.path.exists(args.input):
        logger.error(f"Input file does not exist: {args.input}")
        sys.exit(1)
    
    # Create relationship validator
    logger.info("Initializing ClinVar relationship validator...")
    validator = ClinvarRelationshipValidator(
        email=args.email,
        api_key=args.api_key,
        use_cache=not args.no_cache
    )
    
    try:
        # Validate relationships
        logger.info(f"Starting relationship validation from file: {args.input}")
        validation_report = validator.validate_relationships_from_csv(args.input)
        
        # Save validation report
        logger.info(f"Saving validation report to file: {args.output}")
        validator.save_validation_report(args.output, format_type=args.format)
        
        # Display statistics
        stats = validation_report.get_statistics()
        
        logger.info("=== Validation Statistics ===")
        logger.info(f"Total relationships: {stats['total']}")
        logger.info(f"Confirmed relationships: {stats['valid']} ({stats['percent_valid']:.2f}%)")
        logger.info(f"Unconfirmed relationships: {stats['invalid']}")
        logger.info(f"Relationships with errors: {stats['errors']}")
        logger.info("==========================")
        
        logger.info(f"Validation completed successfully. Report saved in: {args.output}")
        
    except Exception as e:
        logger.error(f"Error during relationship validation: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()